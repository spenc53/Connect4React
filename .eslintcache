[{"C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\index.tsx":"1","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\reportWebVitals.ts":"2","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\App.tsx":"3","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\board\\index.tsx":"4","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\ai\\MCTS.ts":"5","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\ai\\GameNode.ts":"6","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\data\\TicTacToeBoardData.ts":"7","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\worker\\index.ts":"8","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\worker\\worker.ts":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":199,"mtime":1608831050264,"results":"13","hashOfConfig":"11"},{"size":9751,"mtime":1615861187310,"results":"14","hashOfConfig":"11"},{"size":2518,"mtime":1609282686594,"results":"15","hashOfConfig":"11"},{"size":1374,"mtime":1609270831202,"results":"16","hashOfConfig":"11"},{"size":6681,"mtime":1609281947823,"results":"17","hashOfConfig":"11"},{"size":102,"mtime":1609218250951,"results":"18","hashOfConfig":"11"},{"size":387,"mtime":1615860881661,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1bqejbc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\index.tsx",[],["44","45"],"C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\reportWebVitals.ts",[],"C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\App.tsx",["46"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './board';\n\nfunction App() {\n  return (\n    <>\n    <Board></Board>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\board\\index.tsx",["47","48"],"import { Box, Button, Dialog, Checkbox, CircularProgress, Slider, Typography, Container, withWidth } from '@material-ui/core';\r\nimport BoardData from '../data/TicTacToeBoardData';\r\nimport React from 'react';\r\nimport MCTS from '../ai/MCTS';\r\n\r\nimport Worker from '../worker';\r\n\r\n\r\nconst defaultProps = {\r\n    margin: 1,\r\n    style: { width: '5rem', height: '5rem' },\r\n    // borderColor: 'text.primary',\r\n    // border: 1,\r\n    padding: '0.35rem'\r\n};\r\n\r\nconst phoneProps = {\r\n    margin: '.3rem',\r\n    style: { width: '2rem', height: '2rem' },\r\n    // borderColor: 'text.primary',\r\n    // border: 1,\r\n    padding: '0.2rem'\r\n}\r\n\r\nconst redHighlight = '#E57373';\r\nconst red = '#B71C1C';\r\nconst yellowHighlight = '#FDD835';\r\nconst yellow = '#F9A825';\r\nconst green = '#1B5E20';\r\n\r\nfunction delay(ms: number) {\r\n    return new Promise( resolve => setTimeout(resolve, ms) );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    playerColorMap: any = {\r\n        \"1\": red,\r\n        \"0\": \"grey\",\r\n        \"-1\": yellow\r\n    };\r\n\r\n    playerColorHighlightMap: any = {\r\n        \"1\": redHighlight,\r\n        \"0\": \"grey\",\r\n        \"-1\": yellowHighlight\r\n    };\r\n\r\n    workerInstance = new Worker();\r\n\r\n    state: any;\r\n\r\n    board: BoardData;\r\n\r\n    mcts: MCTS;\r\n\r\n    // this is in ms\r\n    moveSpeed = 100;\r\n\r\n    // this is in seconds\r\n    timeToThink = 1;\r\n\r\n    width = ''\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.width = props.width\r\n        this.board = new BoardData();\r\n        this.mcts = new MCTS();\r\n        this.state = {\r\n            highlighted: -1,\r\n            maxTime: 5000,\r\n            autoPlayAi: true,\r\n        }\r\n\r\n        this.Spot = this.Spot.bind(this);\r\n        this.makeRandomMove = this.makeRandomMove.bind(this);\r\n        this.aiMove = this.aiMove.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        let props: any = this.props;\r\n        if (props.width != prevProps.width) {\r\n            this.width = props.width;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    async aiMove() {\r\n        if(this.board.isGameOver()) {\r\n            // setTimeout(() => {this.board.reset(); this.forceUpdate(); this.playAiGame()},1000)\r\n            return;\r\n        };\r\n        this.setState({isAiMove: true});\r\n        let move = await this.workerInstance.processData({\r\n            boardData: this.board.toJson(),\r\n            maxTime: this.timeToThink\r\n        });\r\n        this.board.makeMove(move);\r\n        this.setState({isAiMove: false});\r\n    }\r\n\r\n    computerMove() {\r\n        if(this.board.isGameOver()) return;\r\n        let move = this.mcts.getNextMove(this.board, this.state.maxTime);\r\n        this.board.makeMove(move);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    async playAsyncGame() {\r\n        // while (true) {\r\n            while (!this.board.isGameOver()) {\r\n                await this.aiMove();\r\n            }\r\n            // delay(1000)\r\n            // this.board.reset();\r\n            // this.forceUpdate();\r\n            // delay(100)\r\n        // }\r\n    }\r\n\r\n    playAiGame() {\r\n        this.playAsyncGame().then(() => {\r\n            console.log(\"done\");\r\n        })\r\n    }\r\n\r\n    makeRandomMove() {\r\n        if (this.board.isGameOver()) return;\r\n\r\n        let possibleMoves = this.board.getPossibleMoves();\r\n        console.log(possibleMoves);\r\n        let move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        console.log(move);\r\n        this.board.makeMove(move);\r\n        this.forceUpdate();\r\n        setTimeout(this.makeRandomMove, this.moveSpeed);\r\n    }\r\n\r\n    GetGameOverText(winner: number): string {\r\n        if (winner === 0) {\r\n            return \"It's a tie!\"\r\n        }\r\n\r\n        if (winner === 1) {\r\n            return \"Player 1 (red) won!\"\r\n        }\r\n\r\n        if (winner === -1) {\r\n            return \"Player 2 (yellow) won!\"\r\n        }\r\n\r\n        return \"It's a tie!\"\r\n    }\r\n\r\n    render() {\r\n        let winningMoves = this.board.getWinner()[1];\r\n        return (\r\n            <Container style={{margin:'.2rem'}}>\r\n                <Typography><h1>Connect 4</h1></Typography>\r\n                <Dialog open={this.board.isGameOver()}>\r\n                    <div style={{margin:'5px', textAlign:'center'}}>\r\n                        {this.GetGameOverText(this.board.getWinner()[0])}\r\n                        <div>\r\n                            <Button variant=\"contained\" onClick={() => {this.board.reset(); this.forceUpdate()}}>Reset</Button>\r\n                        </div>\r\n                    </div>\r\n                </Dialog>\r\n                <Dialog open={this.state.isAiMove} >\r\n                    <Box margin={'10px'} textAlign='center'>\r\n                        <div>\r\n                            The AI is thinking about it's move\r\n                        </div>\r\n                        <div style={{marginTop:'5px'}}>\r\n                            <CircularProgress />\r\n                        </div>\r\n                    </Box>\r\n                </Dialog>\r\n                <Box borderRadius='1rem' style={{backgroundColor:'#318CE7', display:'inline-block'}}>\r\n                    {this.board.board.map((element: [number], row: number) => {\r\n                        return (\r\n                            <Box style={{display: 'flex'}} key={row + \"-row\"}>\r\n                                {element.map((player: number, col: number) => {\r\n                                    return this.Spot(row, col, player, winningMoves);\r\n                                })}\r\n                            </Box>\r\n                        )\r\n                    })}\r\n                </Box>\r\n                <div style={{display:'flex'}}>\r\n                    <div style={{textAlign:'center'}}>\r\n                        AI autoplay for second player\r\n                        <div>\r\n                            <Checkbox checked={this.state.autoPlayAi} onChange={() => {\r\n                                this.setState({autoPlayAi: !this.state.autoPlayAi})\r\n                                \r\n                            }}/>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{width:'300px', textAlign:'center'}}>\r\n                        <Typography id=\"discrete-slider\" gutterBottom>\r\n                            Seconds to think\r\n                        </Typography>\r\n                        <Slider\r\n                            defaultValue={1}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            step={1}\r\n                            marks\r\n                            min={1}\r\n                            max={10}\r\n                            valueLabelDisplay=\"auto\"\r\n                            onChangeCommitted={(event: any, value: number | number[]) => {\r\n                                if (Array.isArray(value)) {\r\n                                    value = value[0]\r\n                                }\r\n                                this.timeToThink= value;\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div style={{display:'flex', margin: '20px'}}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => this.aiMove()}>\r\n                        AI MOVE\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"primary\" style={{marginLeft:'10px'}} onClick={() => this.playAiGame()}>\r\n                        AI GAMEPLAY\r\n                    </Button>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    Spot(row: number, col: number, player: number, winningMoves: any) {\r\n        let color = this.playerColorMap[player.toString()];\r\n        let bgColor = 'background.paper'\r\n        let word = row + ',' + col;\r\n        if (winningMoves.indexOf(word) >= 0) {\r\n            bgColor = green;\r\n        }\r\n\r\n        // if spot should be highlighted\r\n        if (this.state.highlighted !== -1 && this.state.highlighted.row === row && this.state.highlighted.col === col) {\r\n            color = this.playerColorHighlightMap[this.board.currPlayer.toString()];            \r\n        }\r\n\r\n        let props = this.width !== 'xs' ? defaultProps : phoneProps;\r\n\r\n        return (\r\n            <Box borderRadius={'50px'} bgcolor={bgColor} {...props} key={row.toString() + \",\" + col.toString()} onClick={() => this.makeMove(col)} onMouseOver={() => this.updateHighlightedPosition(col)} onMouseLeave={() => this.clearHighlightedPosition()}>\r\n                <div style={{borderRadius:'50px', backgroundColor:color, height:'inherit'}}>\r\n                    {/* {row + \", \" + col} */}\r\n                </div>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    makeMove(col: number) {\r\n        let spot = this.board.topMostColumnSpot(col);\r\n\r\n        if (this.board.currPlayer !== BoardData.PLAYER_ONE && this.state.autoPlayAi) return;\r\n        \r\n        if (spot === -1) {\r\n            return;\r\n        }\r\n\r\n        this.board.makeMove(col);\r\n        this.updateHighlightedPosition(col);\r\n        this.forceUpdate();\r\n\r\n        if (this.state.autoPlayAi) {\r\n            this.aiMove()\r\n        }\r\n    }\r\n\r\n    updateHighlightedPosition(col: number) {\r\n        let spot = this.board.topMostColumnSpot(col);\r\n        \r\n        if (spot === -1 || (this.board.currPlayer !== BoardData.PLAYER_ONE && this.state.autoPlayAi)) {\r\n            this.setState({highlighted: -1});\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            highlighted: {\r\n                'row': spot,\r\n                'col': col\r\n            }\r\n        });\r\n    }\r\n\r\n    clearHighlightedPosition() {\r\n        this.setState({\r\n            highlighted: -1\r\n        })\r\n    }\r\n}\r\n\r\nexport default withWidth()(Board);","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\ai\\MCTS.ts",["49","50","51","52"],"import BoardData from \"../data/TicTacToeBoardData\";\r\nimport GameNode from \"./GameNode\";\r\n\r\nclass MCTS {\r\n    TEMP = 1.41;\r\n\r\n    public getNextMove(board: BoardData, timeForMove: number): number {\r\n        let p = board.currPlayer == BoardData.PLAYER_ONE ? BoardData.PLAYER_TWO : BoardData.PLAYER_ONE;\r\n        let root = new GameNode(null, -1, p);\r\n        root.numVisits = 1;\r\n\r\n        this.branch(board, root, timeForMove);\r\n\r\n        let best = root.getBestChild(1, 0);\r\n\r\n        if (!best) {\r\n            return -1;\r\n        }\r\n\r\n        return best.move;\r\n    }\r\n    \r\n    // TODO: allow time limit\r\n    public branch(board: BoardData, root: GameNode, maxTime: number) {\r\n        let startTime = new Date().getTime();\r\n        let i = -1;\r\n        while (maxTime > (new Date().getTime() - startTime)) {\r\n            i++;\r\n            let currentNode: GameNode | null = root;\r\n            let ogPlayer = board.currPlayer;\r\n            let ogBoard = board.board.map(function(arr: any) {\r\n                return arr.slice();\r\n            });\r\n\r\n            while (true) {\r\n                if (currentNode.move !== -1) {\r\n                    board.makeMove(currentNode.move);\r\n                }\r\n\r\n                if (currentNode.numVisits === 1) {\r\n                    let moves = board.getPossibleMoves();\r\n                    let p = currentNode.player == BoardData.PLAYER_ONE ? BoardData.PLAYER_TWO : BoardData.PLAYER_ONE;\r\n\r\n                    moves.forEach(move => {\r\n                        currentNode?.children.push(new GameNode(currentNode, move, p));\r\n                    });\r\n                }\r\n\r\n                let nextNode = currentNode.getBestChild(i, this.TEMP);\r\n                \r\n                if (nextNode === null) {\r\n                    break;\r\n                }\r\n\r\n                currentNode = nextNode;\r\n\r\n                if (currentNode.numVisits == 0) {\r\n                    board.makeMove(currentNode.move);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let winner = board.playRandomGame();\r\n\r\n            while (currentNode != null) {\r\n                currentNode.updateValue(winner);\r\n                currentNode.numVisits++;\r\n\r\n                // if (currentNode.move !== -1) {\r\n                //     board.clearMove(currentNode.move);\r\n                // }\r\n\r\n                currentNode = currentNode.parent;\r\n            }\r\n            board.currPlayer = ogPlayer;\r\n            board.board = ogBoard;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MCTS;","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\ai\\GameNode.ts",["53","54"],"class GameNode {\r\n    parent: GameNode | null;\r\n    children: GameNode[];\r\n    move: number;\r\n    numVisits: number;\r\n    value: number;\r\n    player: number;\r\n\r\n    constructor(parent: GameNode | null, move: number, player: number) {\r\n        this.parent = parent;\r\n        this.children = [];\r\n        this.move = move;\r\n        this.numVisits = 0;\r\n        this.value = 0;\r\n        this.player = player;\r\n    }\r\n\r\n    public getBestChild(n: number, temp: number): GameNode | null {\r\n        if (this.children.length == 0) return null;\r\n\r\n        let bestValue = Number.NEGATIVE_INFINITY;\r\n        let bestNode = this.children[0];\r\n\r\n        this.children.forEach(child => {\r\n            let val = child.getUCB(n, temp);\r\n\r\n            if (val > bestValue) {\r\n                bestValue = val;\r\n                bestNode = child;\r\n            }\r\n        });\r\n\r\n        return bestNode;\r\n    }\r\n\r\n\r\n    public updateValue(winner: number) {\r\n        if (winner === this.player) {\r\n            this.value++;\r\n        } else if (winner === 0) {\r\n            this.value += .5;\r\n        }\r\n    }\r\n\r\n    private getUCB(n: number, temp: number): number {\r\n        if (this.numVisits == 0) {\r\n            return Number.POSITIVE_INFINITY;\r\n        }\r\n\r\n        return (this.value / this.numVisits) + temp * Math.sqrt(Math.log(n) / this.numVisits);\r\n    }\r\n}\r\n\r\nexport default GameNode;","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\data\\TicTacToeBoardData.ts",["55","56","57","58"],"import Board from \"../board\";\r\n\r\nclass BoardData {\r\n    public board: any;\r\n\r\n    public currPlayer: number;\r\n\r\n    private static NUM_ROWS = 6;\r\n    private static NUM_COLS = 7;\r\n\r\n    public static EMPTY = 0;\r\n    public static PLAYER_ONE = 1;\r\n    public static PLAYER_TWO = -1;\r\n\r\n    constructor() {\r\n        this.currPlayer = BoardData.PLAYER_ONE;\r\n        this.reset();\r\n    }\r\n\r\n    static fromJson(boardJson: any): BoardData {\r\n        let board = new BoardData();\r\n        \r\n        board.board = boardJson['board'];\r\n        board.currPlayer = boardJson['player']\r\n\r\n        return board;\r\n    }\r\n\r\n    public toJson(): any {\r\n        return {\r\n            board: this.board,\r\n            player: this.currPlayer\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.board = [];\r\n        for (let i = 0; i < BoardData.NUM_ROWS; i++) {\r\n            this.board.push([]);\r\n            for (let j = 0; j < BoardData.NUM_COLS; j++) {\r\n                this.board[i].push(0);\r\n            }\r\n        }\r\n\r\n        this.currPlayer = BoardData.PLAYER_ONE;\r\n    }\r\n\r\n    public makeMove(col: number) {\r\n        let row = this.topMostColumnSpot(col);\r\n        this.board[row][col] = this.currPlayer;\r\n        this.currPlayer = this.currPlayer == BoardData.PLAYER_ONE ? BoardData.PLAYER_TWO : BoardData.PLAYER_ONE;\r\n    }\r\n\r\n    public clearMove(col: number) {\r\n        let row = this.topMostColumnSpot(col);\r\n        row++;\r\n        if (row >= BoardData.NUM_ROWS) return;\r\n        this.board[row][col] = 0;\r\n    }\r\n\r\n    public playRandomGame(): number {\r\n        let movesMade = [];\r\n        let possibleMoves = this.getPossibleMoves();\r\n\r\n        while (possibleMoves.length > 0 && !this.isGameOver()) {\r\n            let move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n            this.makeMove(move);\r\n            movesMade.push(move);\r\n            possibleMoves = this.getPossibleMoves();\r\n        }\r\n\r\n        let winner = this.getWinner();\r\n\r\n        movesMade.forEach(move => {\r\n            this.clearMove(move);\r\n        });\r\n\r\n        return winner[0];\r\n    }\r\n\r\n    public getPossibleMoves(): number[] {\r\n        let possibleMoves: number[] = [];\r\n\r\n        if (this.simpleIsGameOver()) return possibleMoves;\r\n\r\n        for (let col = 0; col < BoardData.NUM_COLS; col++) {\r\n            let spot = this.topMostColumnSpot(col);\r\n            if (spot !== -1) {\r\n                possibleMoves.push(col)\r\n            }\r\n        }\r\n\r\n        return possibleMoves;\r\n    }\r\n\r\n    public isGameOver() {\r\n        return this.getPossibleMoves().length === 0 || this.getWinner()[0] != 0;\r\n    }\r\n\r\n    public simpleIsGameOver() {\r\n        return this.getWinner()[0] != 0;\r\n    }\r\n\r\n    public getWinner(): [number, any[]] {\r\n        // check rows\r\n        for (let row = 0; row < BoardData.NUM_ROWS; row++) {\r\n            for (let startCol = 0; startCol < BoardData.NUM_COLS - 3; startCol++) {\r\n                let moves = [];\r\n                let p1Wins = true;\r\n                let p2Wins = true;\r\n                for (let i = 0; i < 4; i++) {\r\n                    let r = row;\r\n                    let c = startCol + i;\r\n                    let spot = this.board[r][c];\r\n                    moves.push(r + ',' + c);\r\n                    p1Wins = p1Wins && spot === BoardData.PLAYER_ONE;\r\n                    p2Wins = p2Wins && spot === BoardData.PLAYER_TWO;\r\n                    if (!p1Wins && !p2Wins) break;\r\n                }\r\n                if (p1Wins) return [BoardData.PLAYER_ONE, moves];\r\n                if (p2Wins) return [BoardData.PLAYER_TWO, moves];\r\n            }\r\n        }\r\n\r\n        // check cols\r\n        for (let col = 0; col < BoardData.NUM_COLS; col++) {\r\n            for (let startRow = 0; startRow < BoardData.NUM_ROWS - 3; startRow++) {\r\n                let moves = [];\r\n                let p1Wins = true;\r\n                let p2Wins = true;\r\n                for (let i = 0; i < 4; i++) {\r\n                    let r = startRow + i;\r\n                    let c = col;\r\n                    let spot = this.board[r][c];\r\n                    moves.push(r + ',' + c);\r\n                    p1Wins = p1Wins && spot === BoardData.PLAYER_ONE;\r\n                    p2Wins = p2Wins && spot === BoardData.PLAYER_TWO;\r\n                    if (!p1Wins && !p2Wins) break;\r\n                }\r\n                if (p1Wins) return [BoardData.PLAYER_ONE, moves];\r\n                if (p2Wins) return [BoardData.PLAYER_TWO, moves];\r\n            }\r\n        }\r\n\r\n        // check right diags\r\n        for (let row = 0; row < BoardData.NUM_ROWS - 3; row++) {\r\n            for (let startCol = 0; startCol < BoardData.NUM_COLS - 3; startCol++) {\r\n                let moves = [];\r\n                let p1Wins = true;\r\n                let p2Wins = true;\r\n                for (let i = 0; i < 4; i++) {\r\n                    let r = row + i;\r\n                    let c = startCol + i;\r\n                    let spot = this.board[r][c];\r\n                    moves.push(r + ',' + c);\r\n                    p1Wins = p1Wins && spot === BoardData.PLAYER_ONE;\r\n                    p2Wins = p2Wins && spot === BoardData.PLAYER_TWO;\r\n                    if (!p1Wins && !p2Wins) break;\r\n                }\r\n                if (p1Wins) return [BoardData.PLAYER_ONE, moves];\r\n                if (p2Wins) return [BoardData.PLAYER_TWO, moves];\r\n            }\r\n        }\r\n\r\n        // check left diags\r\n        for (let row = 0; row < BoardData.NUM_ROWS - 3; row++) {\r\n            for (let startCol = 0; startCol < BoardData.NUM_COLS; startCol++) {\r\n                let moves = [];\r\n                let p1Wins = true;\r\n                let p2Wins = true;\r\n                for (let i = 0; i < 4; i++) {\r\n                    let r = row + i;\r\n                    let c = startCol - i;\r\n                    let spot = this.board[r][c];\r\n                    moves.push(r + ',' + c);\r\n                    p1Wins = p1Wins && spot === BoardData.PLAYER_ONE;\r\n                    p2Wins = p2Wins && spot === BoardData.PLAYER_TWO;\r\n                    if (!p1Wins && !p2Wins) break;\r\n                }\r\n                if (p1Wins) return [BoardData.PLAYER_ONE, moves];\r\n                if (p2Wins) return [BoardData.PLAYER_TWO, moves];\r\n            }\r\n        }\r\n\r\n        return [BoardData.EMPTY, []];\r\n    }\r\n\r\n    public topMostColumnSpot(col: number) {\r\n        let spot = -1;\r\n        for (let row = 0; row < BoardData.NUM_ROWS; row++) {\r\n            if (this.board[row][col] === BoardData.EMPTY) {\r\n                spot = row;\r\n            }\r\n        }\r\n        return spot;\r\n    }\r\n\r\n    public toString() {\r\n        return this.board.join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default BoardData;","C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\worker\\index.ts",[],"C:\\Users\\Seege\\Documents\\projects\\tic-tac-toe-react\\src\\worker\\worker.ts",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":12},{"ruleId":"63","severity":1,"message":"67","line":31,"column":10,"nodeType":"65","messageId":"66","endLine":31,"endColumn":15},{"ruleId":"68","severity":1,"message":"69","line":82,"column":25,"nodeType":"70","messageId":"71","endLine":82,"endColumn":27},{"ruleId":"68","severity":1,"message":"72","line":8,"column":34,"nodeType":"70","messageId":"71","endLine":8,"endColumn":36},{"ruleId":"68","severity":1,"message":"72","line":42,"column":48,"nodeType":"70","messageId":"71","endLine":42,"endColumn":50},{"ruleId":"73","severity":1,"message":"74","line":44,"column":35,"nodeType":"75","messageId":"76","endLine":46,"endColumn":22},{"ruleId":"68","severity":1,"message":"72","line":57,"column":43,"nodeType":"70","messageId":"71","endLine":57,"endColumn":45},{"ruleId":"68","severity":1,"message":"72","line":19,"column":34,"nodeType":"70","messageId":"71","endLine":19,"endColumn":36},{"ruleId":"68","severity":1,"message":"72","line":46,"column":28,"nodeType":"70","messageId":"71","endLine":46,"endColumn":30},{"ruleId":"63","severity":1,"message":"77","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"72","line":51,"column":43,"nodeType":"70","messageId":"71","endLine":51,"endColumn":45},{"ruleId":"68","severity":1,"message":"69","line":97,"column":76,"nodeType":"70","messageId":"71","endLine":97,"endColumn":78},{"ruleId":"68","severity":1,"message":"69","line":101,"column":36,"nodeType":"70","messageId":"71","endLine":101,"endColumn":38},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'delay' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'currentNode', 'currentNode'.","ArrowFunctionExpression","unsafeRefs","'Board' is defined but never used.","no-global-assign","no-unsafe-negation"]